#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('snakes:server');
var https = require('https');
var io = require('socket.io');
var SnakeStorage = require('../modele/snakeStorage').SnakeStorage;
var Snake = require('../modele/snake').Snake;
var Point = require('../modele/point').Point;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var privateKey  = fs.readFileSync('ssl/privatekey.pem', 'utf8');
var certificate = fs.readFileSync('ssl/certificate.pem', 'utf8');

var credentials = {key: privateKey, cert: certificate};
var server = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io = io.listen(server);
var snakeStore = new SnakeStorage();

io.on('connection', function(socket) {
    console.log(socket.id + " connected");
    snakeStore.add(socket.id, new Snake(new Point(100,100), 9,snakeStore.getNewSnakeColor()));

    //setInterval(function(){
    //    socket.emit("snakes",{snakes : snakeStore.storage});
    //    socket.on('snake',function(snake){
    //            snakeStore.changeDirection(socket.id, new Point(snake.direction.x, snake.direction.y));
    //            snakeStore.update();
    //            socket.emit("snakes",{snakes : snakeStore.storage});
    //    });
    //}, 3/50);
    socket.on('disconnect', function(){
        snakeStore.remove(socket.id);
        console.log('client ' + socket.id + ' disconnected');
        console.log('now down to ' + snakeStore.storage.length + ' snakes');
    });
});