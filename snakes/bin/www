#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('snakes:server');
var https = require('https');
var io = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var privateKey  = fs.readFileSync('ssl/privatekey.pem', 'utf8');
var certificate = fs.readFileSync('ssl/certificate.pem', 'utf8');

var credentials = {key: privateKey, cert: certificate};
var server = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io = io.listen(server);

io.on('connection', function(socket) {
    socket.on('snake',function(snake){
        var movingSnake = setInterval(function(){
            var vector = {x :(snake.target.x - snake.head.x),y :(snake.target.y - snake.head.y)};
            vector.length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);
            //if(vector.length > 3)
            //{
                var newTail = [];
                for(var i = snake.tail.length - 1; i >= 0; i--){
                    //Part of the snake that comes before the current one
                    var previousSegmentPosition = (i == 0 ? snake.head : snake.tail[i-1]);

                    //Creation of new tail coords to send over to client
                    newTail[i] = {x:previousSegmentPosition.x, y:previousSegmentPosition.y, index:i};
                    //Update of old tail coordinates into new ones
                    snake.tail[i].x = previousSegmentPosition.x;
                    snake.tail[i].y = previousSegmentPosition.y;
                }

                console.log(newTail.length);

                snake.head.x += vector.x / 60;
                snake.head.y += vector.y / 60;
                var newSnake = {newSnake:{head:{x:snake.head.x, y:snake.head.y},tail:newTail}};
                console.log(Date.now() + " : emitting new instructions");
                io.emit('instruction',newSnake);
            //}
            //else {
            //    console.log("movement completed");
            //    clearInterval(movingSnake);
            //}
        }, 3/50);
    });
    socket.on('disconnect', function(){
        console.log('disconnected');
    });
});